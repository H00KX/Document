p371
卷设备对象表示装载的逻辑卷的实例。该设备对象由文件系统驱动程序实现创建； 

在访问存储设备上的文件系统数据之前，大多数操作系统通常需要装载操作，装载操作由平台上的文件系统驱动程序来执行。
装载卷的过程只是为了让文件系统驱动程序有机会为后续访问准备卷。


通常，文件系统驱动程序将首先检查磁盘上的数据结构，以确定要装载的介质是否包含有效的文件系统信息。如果这些检查通过，
文件系统将读入基本卷信息，如卷大小、根目录位置、空闲块映射、分配的群集映射等，然后创建必要的内存结构，用于支持对卷的访问。


在Windows NT系统下，I/O管理器要求创建一个代表装入的逻辑卷的设备对象（卷设备对象），
对于物理介质，与代表物理介质的设备对象相关联的VPB被正确初始化。
使用属于物理设备对象的VPB结构，每个卷设备对象在逻辑上与物理设备对象相关联。
这种关联发生在卷装载时，这种情况发生在输入/输出管理器收到驻留在物理设备对象上的对象的第一个创建/打开请求时。（应该是这个磁盘上的一个文件被打开或创建时）


流程：
1.例如，对“C:\dirl”的打开
2.输入/输出管理器获得一个指向VPB结构的指针，该结构与表示“C:”的物理设备对象相关联；
3.输入/输出管理器检查VPB中的“Flags”字段，查看物理设备对象是否存在已装入的逻辑卷；
4.如果(不存在已装入的卷，即未设置VPB _ MOUNTED)
4.1 输入/输出管理器请求每个文件系统（ntfs、fat32）检查它们是否希望在物理设备对象上执行装载
4.2 文件系统驱动程序之一执行装载操作；
4.3 作为“装载”过程的一部分，FSD将创建FILE_DEVICE_DISK_FILE_SYSTEM类型的设备对象或网络等效对象；
4.4 现在，VPB中的DeviceObject字段将指向逻辑卷设备对象(这是由执行装载的FSD完成的)；
4.5 有的文件系统为装载请求返回STATUS_SUCCESS 时，输入/输出管理器将在VPB的标志字段中设置VPB_MOUNTED标志
5. 现在，输入/输出管理器可以继续执行与创建/打开请求相关的其他指令

VPB已经是关联上物理设备对象了，就是在装载的时候创建对应的卷设备对象并关联。


p372
VPB
该结构在物理磁盘设备对象和逻辑卷设备对象之间创建逻辑关联的重要任务
VPB结构仅存在于可以装载的物理、虚拟和/或逻辑介质的设备对象中。
因此，如果您设计网络重定向器和/或服务器，您将不会直接与VPB结构交互。
注意，在物理设备对象和表示安装的逻辑卷设备对象之间没有物理关联
(即，没有指针从逻辑卷设备对象直接通向物理设备对象，反之亦然，这通常发生在两个设备对象通过连接操作连接时)
对于文件系统装载操作，两个设备对象之间的唯一关联是通过VPB结构的逻辑连接。
输入/输出管理器知道两个设备对象之间的逻辑关联，并且在收到对磁盘的创建/打开请求时，
总是检查VPB结构，以确定请求实际应该指向的文件系统卷设备对象。


p373
Also  note  that  each  file  object  structure  representing  a  successful  open  operationon  an  on-clisk  object  points  to  the  VPB  structure  belonging  to  the  physical  deviceon which the  opened  on-disk object  resides.
每个文件对象结构表示一个指向属于打开的磁盘的VPB结构的磁盘上对象的成功打开操作（其实就是一个磁盘上文件正确的打开生成了文件对象）

Volume  control block  (VCB)
作为装载过程的一部分，为了使文件系统能够有序、正确地访问逻辑卷中包含的数据。
维护的有助于此过程的结构之一是VCB结构

VCB结构包含诸如指向内存中根目录结构(即根目录的FCB)的指针、逻辑卷上当前打开的文件流的数量、表示逻辑卷在任何给定时刻的状态的一些标志、
用于保持VCB结构本身完整性的同步结构以及其他类似信息等基本信息

一般情况下，在创建逻辑卷设备对象时，VCB作为设备对象扩展的一部分


p374
许多Windows NT FSD的实现使用缓存管理器来缓存磁盘卷元数据结构。 这是通过创建流文件对象来表示打开的磁盘卷信息，然后启动对该文件对象的缓存来实现的。
使用CcMapData（）将数据映射到系统缓存中，并且可以轻松访问它，就像通常由用户线程访问缓存的文件流数据一样。


typedef struct _SFsdVolumeControlBlock 
{
SFsdldentifier                       Nodeldentifier;

//a resource to protect the fields contained within the VCB   保护VCB中包含的字段的资源
ERESOURCE                           VCBResource;

// each VCB is accessible on a global linked list 每个VCB都可以在全局链表上访问
LIST_ENTRY                          NextVCB;

// each VCB points to a VPB structure created by the NT I/O Manager 每个VCB指向由NT I / O管理器创建的VPB结构
PVPB                                 PtrVPB;

// a set of flags that might mean something useful
uint32                               VCBFlags;

// A count of the number of open files/directories
//As long as the count is  != 0, the volume cannot
// be dismounted or locked.				打开的文件目录数量的计数//只要该计数为！= 0时，无法卸载或锁定卷。
uint32                              VCBOpenCount;

// we will maintain a global list of IRPs that are pending
// because of a directory notify request.   我们将维护一个由于目录通知请求而挂起的IRp的全局列表
LIST_ENTRY                          NextNotifyIRP;

// the above list is protected only by the mutex declared below
KMUTEX                              NotifylRPMutex;

// for each mounted volume, we create a device object. Here then
// is a back pointer to that device object	对于每个装载的卷，我们创建一个设备对象。这里//是指向该设备对象的反向指针
PDEVICE_OBJECT                      VCBDeviceObject;

//We also retain a pointer to the physical device object, which we
// have mounted ourselves. The I/O Manager passes us a pointer to this
// device object when requesting a mount operation.   我们还保留了一个指向物理设备对象的指针，我们自己安装了这个对象。 请求挂载操作时，I / O管理器向我们传递指向此//设备对象的指针。
PDEVICE_OBJECT                      TargetDeviceObject;

// the volume structure contains a pointer to the root directory FCB  卷结构包含一个指向根目录FCB的指针
PtrSFsdFCB                          PtrRootDirectoryFCB;

// For volume open operations, we do not create a FCB  (we use the VCB
//   directly instead). Therefore, all CCB structures for the volume
//    open operation are linked directly to the VCB   对于批量打开操作，我们不创建FCB（我们直接使用VCB）。 因此，卷打开操作的所有CCB结构都直接链接到VCB
LIST_ENTRY                          VolumeOpenListHead;

// Pointer to a stream file object created for the volume information
// to be more easily read from secondary storage  (with the support of
// the NT Cache Manager).      指向为卷信息创建的流文件对象的指针，以便更容易从辅助存储中读取(在NT缓存管理器的支持下)。
PFILE_OBJECT                        PtrStreamFileObject;

// Required to use the Cache Manager.
SECTION_OBJECT_POINTERS               SectionObject;

// File sizes required to use the Cache Manager.
LARGE_INTEGER                        AllocationSize;
LARGE_INTEGER                        FileSize;
LARGE_INTEGER                       ValidDataLength;
} SFsdVCB, *PtrSFsdVCB;

p375

传统文件系统通常操作两种类型的磁盘对象:文件和目录。
据我们所知，一个文件仅仅代表存储在磁盘上的字节流。
目录是文件系统定义的结构，包含文件信息；即目录本身没有用，仅作为定位文件的手段，而文件又包含用户的数据。

文件只是目录中包含的命名对象。

很多不太懂

p376
在大多数UNIX实现中，文件或目录的内存抽象通常称为vnode。在Windows NT系统上，它被称为文件控制块。
不管用什么术语来表示这种表示，重要的是要注意的是，一个磁盘上的对象必须总是用一个，而且只有一个，FCB来表示。
因此，即使您的文件系统支持多个链接的文件流，您也应该只创建一个FCB来在内存中表示该文件流，
而不用考虑两个不同的进程可能使用不同的路径名或标识符来打开同一个磁盘上的对象。


p378
关于FCB结构，您应该注意的第一件事是操作系统不能确定这个结构的内容。
因此，每个文件系统实现对FCB结构中包含的字段具有完全的灵活性。
同样，定义的大多数fcb结构将维护一个表示fcb当前引用计数的字段，以及另一个表示fcb当前openhandlecount的字段。


p379

虽然Windows NT允许FSD在如何定义自己的FCB结构方面具有相当大的自由度，
但是与缓存管理器和虚拟内存管理器的成功集成要求某些NT定义的结构也与FCB相关联。
如果FSD需要使用NT系统缓存并且还支持内存映射文件，则必须与NT CacheManager和VMM集成。

作为成功集成的先决条件，有四个字段必须与每个FCB相关联:
1. 一个FSRTL_COMMON_FCB_HEADER类型的单个结构
2. 一个SECTION_OBJECT_POINTERS类型的单个结构
3. 两个ERESOURCE类型的同步结构(由示例FSD命名为主资源和分页资源)


p380
永远不能从分页池中分配ERESOURCE类型对象，也不应该从pagedmemory分配CommonFCBHeader或SectionObject字段。（也就是说上面的四个结构所用的内存不能是非分页的）
 
内存中的fcb结构何时创建和释放？
当首次打开字节流并且系统内存中当前不存在表示此字节流的其他FCB结构时
例如，如果应用程序决定自系统启动以来第一次打开文件foo，则管理foo所在的逻辑卷的FSD会创建一个FCB结构以响应调用者的打开请求（即，处理 IRP_MJ_CREATE请求）。 
然而，对文件foo的后续请求将不会导致创建新的内存中FCB结构，只要先前创建的FCB结构仍然由FSD保留在存储器中。 
确定FCB是否仍由FSD保留的因素是由FCB结构中的FSD维护的ReferenceCount字段（或其等价）的值。

如果在接收到新的打开请求时，FSD已经将文件foo的FCB废弃，则FSD将创建新的FCB结构以在内存中表示文件foo。

这个文件控制块结构作为系统内存中可选字节流的唯一表示。只要任何NT组件维护FCB，就保留FCB。
ReferenceCount值为零意味着可以安全地解除分配FCB，因为此时系统中没有组件正在主动访问与由FCB表示的字节流相关联的字节流。


p381

ReferenceCount字段和OpenHandleCount字段。 了解这两个领域的重要性至关重要。

引用计数和打开句柄计数都是由fsd在fcb结构中维护的内部计数，
因此对于任何其他内核模式或用户模式组件都是不可见的。这两个计数都有助于确定何时FSD可以安全地解除分配FCB结构。

引用计数只是一个数字，表示文件系统驱动程序已知的此FCB结构的完整引用总数。
只要引用计数不为零，FSD就知道某个组件正在使用FCB，因此FCB结构的内存不能被释放。
每当FSD响应IRP_MJ_CREATE请求成功的创建/打开操作时，引用计数字段递增1。
每当为FCB处理关闭操作以响应IRP_MJ_CLOSE请求时，该字段的内容减1。
如果某些外部组件在FSD不知情的情况下将指针存储到FCB，则与FCB相关联的打开计数将不会增加，因此FSD无法保证一旦引用计数为0就将其保留。

打开句柄计数仅仅表示FCB的未完成的用户打开句柄的数量。
该字段也作为处理IRP_MJ_CREATE请求的一部分递增; 但是，它仅在响应发给FSD的IRP_MJ_CLEAN请求时递减。
每当用户进程最后关闭文件句柄时（即，当系统打开文件对象的代表所有用户打开实例的句柄数为0时），I / O管理器向FSD发出IRP_MJ_CLEAN请求。


p382

FileObject结构，由NT对象管理器维护。对于文件对象结构，对象管理器维护两个计数，
一个是 每个具有一个或多个与文件对象相关联的打开句柄的进程的进程句柄计数
以及与文件对象相关联的所有进程句柄计数的总和

除了这两个句柄计数值之外，对象管理器还维护所有对象的对象引用计数。
每当ProcessHandleCount或SystemHandleCount值递增时，此引用计数总是递增。
但是，对象引用计数可能会增加，即使进程句柄计数和系统句柄计数都不会增加(例如，内核模式组件引用对象，但不请求对象的新句柄)。比如ObreferenceXXX函数

当一个进程关闭一个打开的句柄时(即，当调用ZwClose()或NtClose()时)，NT对象管理器会减少该对象的进程句柄计数和系统句柄计数。
然后调用与关闭对象相关联的任何对象关闭方法；输入/对象管理器提供被称为lopCloseFile()的close例程。
对象管理器将ProcessHandleCount和SystemHandleCount值提供给lopCloseFile()函数。

如果且仅当文件对象的所有未完成的用户句柄都已关闭，并且文件对象的传入系统句柄计数等于1，
则“lopCloseFile”函数向FSD发出IRP _ MJ _ CLEAN请求，这意味着在调用NtClose()操作时，文件对象上只有一个未完成的引用。

一旦lopCloseFile()完成处理(即FSD已经完成清理请求的处理)，对象管理器将减少文件对象结构的对象引用计数。如果此引用计数值为0，
对象管理器将删除该对象，并且在此之前，调用与文件对象相关联的删除方法(lopDeleteFile())，lopDeleteFile()进而向管理文件对象结构的FSD发出IRP_MJ_CLOSE请求。


p383

FCB有多少用户句柄未完成？
换句话说，FSD应该对成功的IRP_MJ_CREATE请求的总数有所了解，并且尚未收到相应的IRP__MJ_CLEANUP。 
只要此数字非零，FSD就知道至少有一个线程对FCB表示的文件流有一个有效的开放句柄，并且FCB结构应该保留在内存中。

您还应该注意到，虽然FCB的OpenHandleCount是响应于创建操作而创建的(当输入/输出管理器创建新的文件对象时)，
但是该计数不一定对应于相应文件对象上的系统范围句柄计数
该计数主要由nt对象管理器获得。每当用户文件句柄被复制(比如在同一个进程的线程之间)，或者被继承(由一个进程的子进程)，或者每当一些进程从文件对象指针请求一个新句柄时，对象管理器在代表打开文件实例的文件对象上增加系统句柄计数。
由于文件句柄的这种复制或继承发生时，不会通知FSD，因此在这种情况下，FSD内部维护的OpenHandleCount不会增加。
但是，这不会对文件系统接口造成任何问题，因为除非所有对该文件对象有打开句柄的用户线程也调用了关闭操作，否则NT输入/输出管理器不会对该文件对象调用IRP_MJ_CLEANUP请求。
因此，FSD将始终看到对应于一个创建/打开请求的一个清理操作，并将根据清理请求减少打开句柄计数。

FCB结构有多少未完成的引用？
ReferenceCount 字段有助于确定FCB的未结引用总数。
在OpenHandleCounthas降到零后很长时间内，引用计数将是非零，这是完全可能的，也是非常可能的。
这仅仅意味着，尽管FCB的所有用户句柄都已关闭，但一些内核模式组件希望将FCB保留在内存中。

p384

通常，当NT缓存管理器和NT VMM一起合谋将文件数据缓存在内存中时会出现这种情况，即使用户应用程序进程已经关闭文件，
表明它已经完成了文件流的处理。缓存管理器和/或VMM希望在内存中保留文件数据
(记住，除非FCB也存在，否则它们不能在内存中保留文件数据)的原因是，
如果用户应用程序需要再次访问文件流的内容，它们能够提供相对快速的响应。这对你来说可能有点傻，
但是，应用程序进程经常在几分钟内多次打开和关闭同一个文件，并将文件内容保留在内存中，
以帮助加速对同一文件流数据的第二次和后续访问，从而提高系统吞吐量。

总而言之，VMM或任何组件如何确保FSD在内存中保留FCB？
答案是这样的:例如，如果VMM希望确保FCB留下来，它会引用一些与FCB相关的文件对象。
通过引用文件对象，VMM防止对象管理器对该文件对象发出关闭请求，即使该特定文件对象的所有用户句柄都已关闭。
因此，FCB参考计数不会递减到0，而FCB会保留在内存中。








































